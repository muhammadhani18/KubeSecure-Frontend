"use client";

import { useState, useEffect } from "react"; // Added useEffect
import { useSearchParams } from 'next/navigation'; // Added useSearchParams
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Shield, Search, Loader2, AlertCircle } from "lucide-react"; // Using Search as an example icon

export default function VulnerabilityScannerPage() {
  const searchParams = useSearchParams(); // Added
  const [imageName, setImageName] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [scanResults, setScanResults] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => { // Added useEffect hook
    const imageNameFromQuery = searchParams.get('image_name');
    if (imageNameFromQuery) {
      setImageName(imageNameFromQuery);
      // If auto-scan were desired, could call handleScan() here,
      // assuming handleScan uses the `imageName` state.
    }
  }, [searchParams]);

  const handleScan = async () => {
    if (!imageName.trim()) {
      setError("Image name cannot be empty.");
      setScanResults(null);
      return;
    }
    setIsLoading(true);
    setError(null);
    setScanResults(null);

    try {
      const response = await fetch("/api/scan-image", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ image_name: imageName }),
      });

      const data = await response.json();

      if (!response.ok) {
        setError(data.error || `Scan failed with status: ${response.status}`);
        setScanResults(null);
      } else {
        // Handle both direct array of vulnerabilities and object with Results array
        let vulnerabilities = [];
        if (Array.isArray(data)) {
          // This case might occur if Trivy's output is a direct array of results (e.g. for a single package scan, less common for image scans)
          // For image scans, data is usually an object with a "Results" field or an array of objects each with a "Vulnerabilities" field.
          // Assuming if data is an array, it's an array of "Target" objects, each containing "Vulnerabilities"
           data.forEach(target => {
             if (target.Vulnerabilities) {
               vulnerabilities = vulnerabilities.concat(target.Vulnerabilities.map(v => ({...v, Target: target.Target})));
             }
           });
        } else if (data && data.Results && Array.isArray(data.Results)) {
          data.Results.forEach(result => {
            if (result.Vulnerabilities) {
              vulnerabilities = vulnerabilities.concat(result.Vulnerabilities.map(v => ({...v, Target: result.Target})));
            }
          });
        } else if (data && data.Vulnerabilities && Array.isArray(data.Vulnerabilities)) {
          // Sometimes the root object itself might contain vulnerabilities (less common for multi-target scans)
          vulnerabilities = data.Vulnerabilities.map(v => ({...v, Target: data.Target || imageName}));
        } else if (Array.isArray(data.Vulnerabilities)) { // Catch if root is just { "Vulnerabilities": [] }
            vulnerabilities = data.Vulnerabilities.map(v => ({...v, Target: imageName}));
        }


        if (vulnerabilities.length > 0) {
            setScanResults(vulnerabilities);
        } else {
            // Check if the raw data (before processing) indicates no vulnerabilities
            // This handles cases where Trivy returns an empty array or specific structure for "no vulnerabilities"
            // For example, if data itself is an empty array or data.Results is empty
            if ((Array.isArray(data) && data.length === 0) ||
                (data && Array.isArray(data.Results) && data.Results.length === 0) ||
                (data && data.Results && data.Results.every(r => !r.Vulnerabilities || r.Vulnerabilities.length === 0))
            ) {
                 setScanResults([]); // Explicitly set to empty array for "no vulnerabilities" message
            } else if (Object.keys(data).length === 0 || (data.Results && data.Results.length === 0 && !data.Vulnerabilities)) {
                 setScanResults([]); // Handles empty object or object with empty results
            } else if (data && !data.Results && !data.Vulnerabilities && !Array.isArray(data)) {
                // If data is an object but doesn't conform to expected structures, assume no vulnerabilities for now
                // Or it could be an error not caught properly. The API should ideally return a clear "no vulns" or error.
                console.warn("Unexpected scan result format, assuming no vulnerabilities:", data);
                setScanResults([]);
            } else if (vulnerabilities.length === 0 && !error) {
                // If after processing, vulnerabilities list is empty and no error was set
                setScanResults([]);
            }
        }
      }
    } catch (err) {
      console.error("Scan request failed:", err);
      setError("An unexpected error occurred while trying to scan the image. Check browser console for details.");
      setScanResults(null);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen w-full flex-col">
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="grid gap-4">
          <header className="flex h-14 items-center gap-4 border-b bg-muted/40 px-4 md:px-6">
            {/* Replicating a simple header structure, adjust as per actual Header component if available */}
            <h1 className="text-lg font-semibold md:text-2xl flex items-center">
              <Search className="h-6 w-6 mr-2" /> Vulnerability Scanner
            </h1>
          </header>

          <Card>
            <CardHeader>
              <CardTitle>Scan Container Image</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex space-x-2">
                <Input
                  type="text"
                  placeholder="e.g., alpine:latest, nginx:1.25"
                  value={imageName}
                  onChange={(e) => setImageName(e.target.value)}
                  onKeyPress={(e) => { if (e.key === 'Enter') handleScan(); }}
                  disabled={isLoading}
                  className="flex-grow"
                />
                <Button onClick={handleScan} disabled={isLoading}>
                  {isLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Scanning...
                    </>
                  ) : (
                    "Scan Image"
                  )}
                </Button>
              </div>

              {error && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              {isLoading && (
                <div className="flex items-center justify-center p-6">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  <p className="ml-2">Scanning image, please wait...</p>
                </div>
              )}

              {scanResults && !isLoading && (
                <div>
                  <h2 className="text-xl font-semibold mt-6 mb-4">Scan Results for {scanResults.length > 0 && scanResults[0].Target ? scanResults[0].Target : imageName}</h2>
                  {scanResults.length === 0 ? (
                    <p>No vulnerabilities found for this image.</p>
                  ) : (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>ID</TableHead>
                          <TableHead>Severity</TableHead>
                          <TableHead>Package</TableHead>
                          <TableHead>Installed Version</TableHead>
                          <TableHead>Fixed Version</TableHead>
                          <TableHead>Title</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {scanResults.map((vuln, index) => (
                          <TableRow key={vuln.VulnerabilityID + '-' + index}>
                            <TableCell>{vuln.VulnerabilityID}</TableCell>
                            <TableCell>{vuln.Severity}</TableCell>
                            <TableCell>{vuln.PkgName}</TableCell>
                            <TableCell>{vuln.InstalledVersion}</TableCell>
                            <TableCell>{vuln.FixedVersion || "N/A"}</TableCell>
                            <TableCell className="max-w-xs truncate" title={vuln.Title || vuln.Description}>
                                {vuln.Title || vuln.Description || "No description available"}
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}
