"use client";

import { useState, useEffect, Suspense } from "react";
import { useSearchParams } from 'next/navigation';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Shield, Search, Loader2, AlertCircle } from "lucide-react";
import { Navbar } from "@/components/navbar";
import Header from "@/components/header";
import { getApiUrl, API_CONFIG } from "@/lib/config";

// Component that handles search params - needs to be wrapped in Suspense
function SearchParamsHandler({ setImageName }) {
  const searchParams = useSearchParams();
  
  useEffect(() => {
    const imageNameFromQuery = searchParams.get('image_name');
    if (imageNameFromQuery) {
      setImageName(imageNameFromQuery);
    }
  }, [searchParams, setImageName]);

  return null; // This component doesn't render anything
}

// Main vulnerability scanner component
function VulnerabilityScannerContent() {
  const [imageName, setImageName] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [scanResults, setScanResults] = useState(null);
  const [error, setError] = useState(null);

  const handleScan = async () => {
    if (!imageName.trim()) {
      setError("Image name cannot be empty.");
      setScanResults(null);
      return;
    }
    setIsLoading(true);
    setError(null);
    setScanResults(null);

    try {
      // Call FastAPI backend instead of Next.js API route
      const response = await fetch(getApiUrl(API_CONFIG.ENDPOINTS.SCAN_IMAGE), {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ image_name: imageName }),
      });

      const data = await response.json();

      if (!response.ok) {
        // FastAPI returns error details in the 'detail' field
        setError(data.detail || `Scan failed with status: ${response.status}`);
        setScanResults(null);
      } else {
        // FastAPI returns data in a structured format: { message, data, error }
        const trivyOutput = data.data;
        
        // Handle both direct array of vulnerabilities and object with Results array
        let vulnerabilities = [];
        if (Array.isArray(trivyOutput)) {
          // This case might occur if Trivy's output is a direct array of results
          trivyOutput.forEach(target => {
            if (target.Vulnerabilities) {
              vulnerabilities = vulnerabilities.concat(target.Vulnerabilities.map(v => ({...v, Target: target.Target})));
            }
          });
        } else if (trivyOutput && trivyOutput.Results && Array.isArray(trivyOutput.Results)) {
          trivyOutput.Results.forEach(result => {
            if (result.Vulnerabilities) {
              vulnerabilities = vulnerabilities.concat(result.Vulnerabilities.map(v => ({...v, Target: result.Target})));
            }
          });
        } else if (trivyOutput && trivyOutput.Vulnerabilities && Array.isArray(trivyOutput.Vulnerabilities)) {
          // Sometimes the root object itself might contain vulnerabilities
          vulnerabilities = trivyOutput.Vulnerabilities.map(v => ({...v, Target: trivyOutput.Target || imageName}));
        } else if (Array.isArray(trivyOutput?.Vulnerabilities)) {
          vulnerabilities = trivyOutput.Vulnerabilities.map(v => ({...v, Target: imageName}));
        }

        if (vulnerabilities.length > 0) {
          setScanResults(vulnerabilities);
        } else {
          // Check if the raw data indicates no vulnerabilities
          if ((Array.isArray(trivyOutput) && trivyOutput.length === 0) || 
              (trivyOutput && Array.isArray(trivyOutput.Results) && trivyOutput.Results.length === 0) ||
              (trivyOutput && trivyOutput.Results && trivyOutput.Results.every(r => !r.Vulnerabilities || r.Vulnerabilities.length === 0)) ||
              data.message === "No vulnerabilities found"
          ) {
            setScanResults([]); // Explicitly set to empty array for "no vulnerabilities" message
          } else if (!trivyOutput || Object.keys(trivyOutput).length === 0) {
            setScanResults([]); // Handles empty object
          } else if (vulnerabilities.length === 0 && !error) {
            setScanResults([]);
          }
        }
      }
    } catch (err) {
      console.error("Scan request failed:", err);
      if (err.name === 'TypeError' && err.message.includes('fetch')) {
        setError("Cannot connect to the scanning service. Please ensure the FastAPI backend is running on port 8000.");
      } else {
        setError("An unexpected error occurred while trying to scan the image. Check browser console for details.");
      }
      setScanResults(null);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen flex-col bg-background">
      <Header />
      <div className="container flex-1 items-start py-8 px-6 md:px-8 md:grid md:grid-cols-[220px_1fr] md:gap-8 lg:grid-cols-[240px_1fr] lg:gap-12">
        <Navbar />
        <main className="flex w-full flex-col overflow-hidden space-y-8">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-semibold tracking-tight flex items-center">
              <Shield className="h-6 w-6 mr-2" /> Vulnerability Scanner
            </h1>
          </div>

          {/* Suspense boundary for search params */}
          <Suspense fallback={null}>
            <SearchParamsHandler setImageName={setImageName} />
          </Suspense>

          <Card>
            <CardHeader>
              <CardTitle>Scan Container Image</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex space-x-2">
                <Input
                  type="text"
                  placeholder="e.g., alpine:latest, nginx:1.25"
                  value={imageName}
                  onChange={(e) => setImageName(e.target.value)}
                  onKeyPress={(e) => { if (e.key === 'Enter') handleScan(); }}
                  disabled={isLoading}
                  className="flex-grow"
                />
                <Button onClick={handleScan} disabled={isLoading}>
                  {isLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Scanning...
                    </>
                  ) : (
                    "Scan Image"
                  )}
                </Button>
              </div>

              {error && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              {isLoading && (
                <div className="flex items-center justify-center p-6">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  <p className="ml-2">Scanning image, please wait...</p>
                </div>
              )}

              {scanResults && !isLoading && (
                <div>
                  <h2 className="text-xl font-semibold mt-6 mb-4">Scan Results for {scanResults.length > 0 && scanResults[0].Target ? scanResults[0].Target : imageName}</h2>
                  {scanResults.length === 0 ? (
                    <p>No vulnerabilities found for this image.</p>
                  ) : (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>ID</TableHead>
                          <TableHead>Severity</TableHead>
                          <TableHead>Package</TableHead>
                          <TableHead>Installed Version</TableHead>
                          <TableHead>Fixed Version</TableHead>
                          <TableHead>Title</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {scanResults.map((vuln, index) => (
                          <TableRow key={vuln.VulnerabilityID + '-' + index}>
                            <TableCell>{vuln.VulnerabilityID}</TableCell>
                            <TableCell>{vuln.Severity}</TableCell>
                            <TableCell>{vuln.PkgName}</TableCell>
                            <TableCell>{vuln.InstalledVersion}</TableCell>
                            <TableCell>{vuln.FixedVersion || "N/A"}</TableCell>
                            <TableCell className="max-w-xs truncate" title={vuln.Title || vuln.Description}>
                                {vuln.Title || vuln.Description || "No description available"}
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </main>
      </div>
    </div>
  );
}

export default function VulnerabilityScannerPage() {
  return <VulnerabilityScannerContent />;
}